* 1.x

** 1.4.9

This release contains only security updates in dependencies.

** 1.4.8

This release contains only security updates in dependencies.
   
** 1.4.7

This release is mainly for security updates in dependencies. The only
change in the library's code is that SynsetSearchForm now has a
max value of 5 for the editDistance field.
   
** 1.4.6

This release adds some small conveniences:

1) The SynsetSearchForm component now accepts an =autoFocus= prop, which
   can be used to prevent the text input in the form from stealing focus
   from other inputs on the page.

2) The Checkbox component now accepts an =inline= prop, which can be
   used to align checkboxes horizontally in a form (even when the form
   itself does not have the =form-inline= CSS class).

** 1.4.5

This release fixes some minor warts and warnings.  The major changes are:

1) React key errors have been fixed in various places. The components
   in SynsetSearch and GenericDisplay now do a better job of setting keys.
2) The Card component in GenericDisplay now supports header and footer props.
3) Components in GenericDisplay which are direct wrappers of HTML
   elements now forward any additional props they receive to those
   elements. In particular, the following components now support this
   behavior:
   - Header
   - List
   - ListItem
   - DefList


Note: there is one very minor backwards-incompatible change. Due to
the changes in (1) and (3), the props interface of the ListItem
component has changed, so that it no longer requires an id prop, or
idFor and data props. If these props are provided, they will now be
passed on to the underlying <li> element. The previous behavior was
incorrect, per the advice at:

https://reactjs.org/docs/lists-and-keys.html#extracting-components-with-keys

To upgrade, simply provide the value previously passed to the id prop
(or the result of idFor(data)) as the key value for the ListItem
instead, e.g.,

<ListItem id="foo">...</ListItem>

should become 

<ListItem key="foo">...</ListItem>
 
and 

<ListItem idFor={someFunc} data={someObj} />

should become

<ListItem key={someFunc(someObj)} data={someObj} />

** 1.4.4

This release changes only dependencies.  The package now depends on
the vis-network package (rather than the visjs-network package, which
is outdated and doesn't seem to be updated anymore).  

** 1.4.3

This release makes a small change to allow the consuming application
to pass a custom instance of axios, which germanet-common will then
use to make its API calls. This enables, for example, handling
authorization errors via axios interceptors.

** 1.4.2

This release fixes a problem that prevented graphs from displaying
when the backend is unreachable, even if the relevant data is already
present.  This was needed to make graphs with sample data work in
tutorials.

It also includes security updates for npm dependencies.  

** 1.4.1 

This release contains very minor changes but fixes one user-visible
bug: in the advanced search form, the column containing word category
checkboxes is now labeled "Word Categories" (plural), to be consistent
with the other column headers.

Other changes:

  - the displayFields prop for the DataTable component in
    GenericDisplay is now optional, and defaults to displaying columns
    for every field in the provided fieldMap, which is almost always
    what is wanted
  - some documentation improvements

** 1.4.0

This release introduces powerful new advanced search options in the
SynsetSearchForm. By setting advanced={true} in a SynsetSearchForm,
you can now search with support for regular expressions or edit
distance, and narrow by word category and class or orthographic
variant.

The change is mostly backward-compatible, but the appearance of the
search form has changed slightly, even when the advanced options are
not enabled. Most importantly, the form now contains a reset button
next to the search button which clears the search form. (You can
obtain the appearance of the old form without the reset button by
passing resetButtonExtras="d-none" to SynsetSearchForm.)

Using these new advanced search options requires a backend which
supports the corresponding query parameters at the /synsets API
endpoint.  This endpoint is currently in development for
germanet-rover at the SfS and supported by changes in the development
version of the GermaNet Java API.

Note: when using the advanced search options, search result sets can
be much larger. This can make it necessary to limit the number of
results that are rendered inside a SynsetSearchResults data container
(especially if rendering those results requires making further HTTP
requests). The advanced search options are off by default;
applications which enable them are expected to handle the greater
number of results in a manner that is appropriate for their way of
rendering the data.

** 1.3.1

This is purely a bugfix release that fixes an issue with keyboard
interaction related to the new graph visualizations in 1.3.0.

** 1.3.0

This release contains a fairly major change which is *not backward
compatible*: graph visualizations are now drawn with the visjs-network
library, instead of d3. The components for the previous visualizations
have been removed from the Graphs and ConRels directories, because
they depend on d3, which has been removed as a dependency because of
its size. Thus, any project relying on these components will need to
be upgraded to use the new visualizations.  The major changes here are:

  - a new /graphs/path backend endpoint is assumed which returns data
    in a format that is easier to work with in the context of vis.js,
    instead of relying on the /conrels endpoint to fetch hypernym
    relation data. Initial implementations of this endpoint have been
    written for the projects using germanet-common at the SfS.
  - the APIWrapper component has been generalized to allow for
    different types of data to be returned from API endpoints;
    API-wrapped components can now supply a data validation function
    to ensure that data returned from a backend endpoint is valid
    before it is dispatched via a 'RETURNED' query action.
  - the following new components are available in the Graphs directory
    for rendering graphs of the hypernym relation via vis.js:

    + NetworkContainer, a low-level React wrapper for vis.js' Network
    + HnymPathsBetweenGraph, a high-level component that uses
      NetworkContainer to render the paths in the hypernym relation
      between two synsets via their least common subsumer(s)
    + HnymPathsToRootGraph, a high-level component that renders all
      paths in the hypernym relation between a given synset and the
      GNROOT synset

** 1.2.5 

This release contains bug fixes and adds a few minor features, namely:

  - there is a new global RESET_GERMANET_COMMON action to clear all Redux
    state handled by the library, exported from the top level actions.js 
  - the ManagedForm component now allows (but does not require)
    returning a Redux thunk action creator from an onSuccess handler;
    this provides a general mechanism to allow onSuccess handlers to
    update UI outside the form itself
  - the Options component now works better with Firefox
  - the DataSelect component now properly passes props down to Select,
    and Select's choose prop has been moved up to DataSelect 

Some dead code has been removed, and lodash has been removed as a peer
dependency.  

** 1.2.4 

This release contains bug fixes and adds a few minor features to
the GenericForms components, namely:

  - the formState object in a ManagedForm now exposes a setState()
    method that allows you to set custom form state 
  - the formState object is now also passed to the onSuccess callback
    of a ManagedForm, to allow stateful UI updates that reflect successful
    form submission and the submitted form data
  - the Checkbox component now wraps the underlying input element and label
    in a .form-check class

** 1.2.3
   
This release contains major new (but mostly backwards-compatible) features:

  - GenericForms: a new set of components for building forms, which
    focuses on keeping things simple by using uncontrolled form
    components and letting the browser handle most form validation.
    The old form components (Button, Checkbox, TextInput, Select) have
    been generalized and moved from GenericDisplay into GenericForms.
    The top-level validation.js has also been moved into GenericForms.
    SynsetSearchForm has been reworked to use the new components from
    GenericForms and no longer emits a Redux action on every change of
    input.
  - DataContainers gained support for sorting functions. The DataTable
    component now has basic support for sorting in ascending and
    descending order on a per-column basis.
  - DataContainers also gained support for optionally rendering a
    separate component when data is unavailable.
    
Other, more minor changes include:

  - Graphs can now be forced to re-draw by setting their forceRedraw
    prop from a parent component.
  - It is now possible to set a prefix for the API endpoints via
    window.GERMANET_API_PREFIX or window.APP_CONTEXT_PATH.
  - A number of internal changes fixed bugs and made it easier to
    extend the components for individual data types with new props.

** 1.2.2 
   
This is a minor release that fixes a few bugs and adds a few
backwards-compatible features.  The important changes are:

  - the selector function for data container state,
    selectContainerState, is now defined in DataContainer/selectors.js
    and can be imported by consuming applications
  - there is also a new selector function there, selectChosenIdIn, to
    select the ID of the chosen item in a data container
  - there is a new isComponent helper to test whether a value can be
    used as a React component
  - the error action type defined by makeQueryActions has been renamed
    to <prefix>_QUERY_ERROR
  - the margin around svg elements for graphs has been removed 

** 1.2.1 

This is a minor release that adds a useful feature to the graphs:
double-click to reset the graph state and restore automatic zooming.

** 1.2.0 

The main changes in 1.2.0 involve the SynsetSearch components, which
have been extensively reworked to make them more flexible and easier
to style.  Some of these changes are *not backwards compatible*; thus
the minor version number bump.

  - SynsetSearchBox has been renamed to SynsetSearchForm and no longer
    wraps the contained form in a Card.  Renaming this component also
    meant renaming a variety of reducers, selectors, etc. The main
    thing to know is that the reducer which consuming libraries must
    install at the top level is now called *synsetSearches* (instead
    of 'synsetSearchBoxes').
  - SynsetSearchHistoryBox has been renamed to SynsetSearchHistoryNav
    and no longer wraps the contained nav element in a Card. This
    component has also changed to a class component and will
    automatically reload history from browser storage when the persist
    prop is true.
  - There is a new SynsetSearchAlert component that allows displaying
    an alert (anywhere on the page) when a search fails to return
    results.
    
The other major change is in APIWrapper.  API-wrapped components
(e.g., all the built-in data containers) will now:

   - not throw an error at mount time if there is not yet enough
     information to make an API request
   - make a new request whenever their props change

The latter change implements behavior which was expected all along,
and should be considered a bugfix, even though it technically
introduces new behavior; see commit a963c0c for an explanation.

There were also a few more minor changes:

  - WiktDefsAsList now renders more like ILIRecordsAsList
  - props that affect styling and appearance became better exposed in
    a few places
  - various bugs were fixed

** 1.1.0

The data format returned by the backend API has changed; hence the jump of
the minor version number.  In addition to accommodating and
documenting these API changes, the major changes in this version are:

   - There is support for tracking search history in the SynsetSearch
     components, including a new SynsetSearchHistoryBox component that
     displays a row of buttons to re-perform previous searches.  These
     searches will be performed with the same parameters (i.e.,
     ignoreCase will be correctly set).
   - The FIELD_MAP and ALL_FIELDS constants for each data type are
     exported so consuming applications can use them.
   - Props related to CSS are better exposed.  Containers for
     individual data types will pass on classNames, extras, etc. to
     the underlying DataTable and DataList components.  This allows
     styling these containers more easily in a consuming application.
   - Various smaller changes in GenericDisplay components, including:
     + a new EmptyTable component, which displays an
       empty data table with column headers and a message for the user
     + the generic Button component also now supports rendering
       disabled buttons.
     + DataTableRow and ListItem gained onClick props

** 1.0.2

   - rearrange package structure.  The package no longer has separate
     src/ and dist/ trees, and no longer transpiles and builds a
     single bundle. Instead, JSX files are transpiled in-place to
     ES2015, and consuming applications are expected to further
     transpile and bundle any code that they import from this library
     as necessary. See the top-level README for motivations for this
     change.
   - Synsets: rewrite SynsetsAsTableRow to use DataTableRow under the
     hood, for consistency and better CSS support

